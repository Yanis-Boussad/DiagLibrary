/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.1, Date: 04-Mar-2013.
 */
#ifndef CSNRR_H
#define CSNRR_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtxsrc/rtxContext.h"
#include "rtsrc/asn1type.h"

/**
 * Header file for ASN.1 module CSNRR
 */
/**************************************************************/
/*                                                            */
/*  TBCDString                                                */
/*                                                            */
/**************************************************************/
/*
<addarg><ArgDescr name="len" type="OSSIZE" func="decode"/></addarg>

TBCDString ::= IA5String (FROM ("0123456789#*abc"))
*/
typedef const char* TBCDString;

EXTERN int NASEnc_TBCDString (OSCTXT* pctxt, TBCDString value);

EXTERN int NASDec_TBCDString (OSCTXT* pctxt, TBCDString* pvalue, OSSIZE len);

EXTERN int asn1PrtToStrm_TBCDString (OSCTXT *pctxt, 
   const char* name, const TBCDString pvalue);

/**************************************************************/
/*                                                            */
/*  TBCDString3                                               */
/*                                                            */
/**************************************************************/
/*
 BCDString3 should be configured as <ctype>chararray</ctype>

TBCDString3 ::= IA5String (SIZE (3)FROM ("0123456789#*abc"))
*/
typedef char TBCDString3[4];

EXTERN int NASEnc_TBCDString3 (OSCTXT* pctxt, TBCDString3 value);

EXTERN int NASDec_TBCDString3 (OSCTXT* pctxt, TBCDString3* pvalue, OSSIZE len);

EXTERN int asn1PrtToStrm_TBCDString3 (OSCTXT *pctxt, 
   const char* name, const TBCDString3 pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRR_IMSI                                                */
/*                                                            */
/**************************************************************/
/*
<ctype>chararray</ctype>
<addarg><ArgDescr name="len" type="OSSIZE" func="decode"/></addarg>

GSMRR-IMSI ::= IA5String (SIZE (14..15)FROM ("0123456789#*abc"))
*/
typedef char GSMRR_IMSI[16];

EXTERN int NASEnc_GSMRR_IMSI (OSCTXT* pctxt, GSMRR_IMSI value);

EXTERN int NASDec_GSMRR_IMSI (OSCTXT* pctxt, GSMRR_IMSI pvalue, OSSIZE len);

EXTERN int asn1PrtToStrm_GSMRR_IMSI (OSCTXT *pctxt, 
   const char* name, const GSMRR_IMSI pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRR_IMEI                                                */
/*                                                            */
/**************************************************************/
/*
<ctype>chararray</ctype>
<addarg><ArgDescr name="len" type="OSSIZE" func="decode"/></addarg>

GSMRR-IMEI ::= IA5String (SIZE (15)FROM ("0123456789#*abc"))
*/
typedef char GSMRR_IMEI[16];

EXTERN int NASEnc_GSMRR_IMEI (OSCTXT* pctxt, GSMRR_IMEI value);

EXTERN int NASDec_GSMRR_IMEI (OSCTXT* pctxt, GSMRR_IMEI pvalue, OSSIZE len);

EXTERN int asn1PrtToStrm_GSMRR_IMEI (OSCTXT *pctxt, 
   const char* name, const GSMRR_IMEI pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRR_IMEISV                                              */
/*                                                            */
/**************************************************************/
/*
<ctype>chararray</ctype>
<addarg><ArgDescr name="len" type="OSSIZE" func="decode"/></addarg>

GSMRR-IMEISV ::= IA5String (SIZE (16)FROM ("0123456789#*abc"))
*/
typedef char GSMRR_IMEISV[17];

EXTERN int NASEnc_GSMRR_IMEISV (OSCTXT* pctxt, GSMRR_IMEISV value);

EXTERN int NASDec_GSMRR_IMEISV (OSCTXT* pctxt, GSMRR_IMEISV pvalue, OSSIZE len);

EXTERN int asn1PrtToStrm_GSMRR_IMEISV (OSCTXT *pctxt, 
   const char* name, const GSMRR_IMEISV pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRProtoDiscr                                           */
/*                                                            */
/**************************************************************/
/*
GSMRRProtoDiscr ::= ENUMERATED { gcc(0), bcc(1), epsSessMgmt(2), callCtrl(3), gttp(4), mobMgmt(5), rrMgmt(6), epsMobMgmt(7), gprsMobMgmt(8), sms(9), sessMgmt(10), nonCallSS(11) } (0..15)
*/
typedef enum {
   GSMRRProtoDiscr_gcc = 0,
   GSMRRProtoDiscr_bcc = 1,
   GSMRRProtoDiscr_epsSessMgmt = 2,
   GSMRRProtoDiscr_callCtrl = 3,
   GSMRRProtoDiscr_gttp = 4,
   GSMRRProtoDiscr_mobMgmt = 5,
   GSMRRProtoDiscr_rrMgmt = 6,
   GSMRRProtoDiscr_epsMobMgmt = 7,
   GSMRRProtoDiscr_gprsMobMgmt = 8,
   GSMRRProtoDiscr_sms = 9,
   GSMRRProtoDiscr_sessMgmt = 10,
   GSMRRProtoDiscr_nonCallSS = 11
} GSMRRProtoDiscr;

EXTERN int NASEnc_GSMRRProtoDiscr (OSCTXT* pctxt, GSMRRProtoDiscr value);

EXTERN int NASDec_GSMRRProtoDiscr (OSCTXT* pctxt, GSMRRProtoDiscr* pvalue);

EXTERN int asn1PrtToStrm_GSMRRProtoDiscr (OSCTXT *pctxt, 
   const char* name, const GSMRRProtoDiscr* pvalue);

EXTERN const OSUTF8CHAR* GSMRRProtoDiscr_ToString (OSINT32 value);

EXTERN int GSMRRProtoDiscr_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, GSMRRProtoDiscr* pvalue);

EXTERN int GSMRRProtoDiscr_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, GSMRRProtoDiscr* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRRSupport                                             */
/*                                                            */
/**************************************************************/
/*

<R Support>::=
	< R-GSM band Associated Radio Capability : bit(3) > ;


GSMRRRSupport ::= INTEGER (0..7)
*/
typedef OSUINT8 GSMRRRSupport;

EXTERN int NASEnc_GSMRRRSupport (OSCTXT* pctxt, GSMRRRSupport value);

EXTERN int NASDec_GSMRRRSupport (OSCTXT* pctxt, GSMRRRSupport* pvalue);

EXTERN int asn1PrtToStrm_GSMRRRSupport (OSCTXT *pctxt, 
   const char* name, const GSMRRRSupport* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRHSCSDMultiSlotCap                                    */
/*                                                            */
/**************************************************************/
/*

< HSCSD Multi Slot Capability > ::=
	< HSCSD Multi Slot Class : bit(5) >  ;


GSMRRHSCSDMultiSlotCap ::= INTEGER (0..31)
*/
typedef OSUINT8 GSMRRHSCSDMultiSlotCap;

EXTERN int NASEnc_GSMRRHSCSDMultiSlotCap (OSCTXT* pctxt
   , GSMRRHSCSDMultiSlotCap value);

EXTERN int NASDec_GSMRRHSCSDMultiSlotCap (OSCTXT* pctxt
   , GSMRRHSCSDMultiSlotCap* pvalue);

EXTERN int asn1PrtToStrm_GSMRRHSCSDMultiSlotCap (OSCTXT *pctxt, 
   const char* name, const GSMRRHSCSDMultiSlotCap* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMBSEnum                                              */
/*                                                            */
/**************************************************************/
/*
 This type enumerates all of the valid bit patterns expressed in the CSN
 for the multibandSupported eleemnt in MobileStationClassmark3

GSMRRMBSEnum ::= ENUMERATED { mbs0(0), mbs1(1), mbs2(2), mbs4(4), mbs5(5), mbs6(6) } (0..6)
*/
typedef enum {
   GSMRRMBSEnum_mbs0 = 0,
   GSMRRMBSEnum_mbs1 = 1,
   GSMRRMBSEnum_mbs2 = 2,
   GSMRRMBSEnum_mbs4 = 4,
   GSMRRMBSEnum_mbs5 = 5,
   GSMRRMBSEnum_mbs6 = 6
} GSMRRMBSEnum;

EXTERN int NASEnc_GSMRRMBSEnum (OSCTXT* pctxt, GSMRRMBSEnum value);

EXTERN int NASDec_GSMRRMBSEnum (OSCTXT* pctxt, GSMRRMBSEnum* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMBSEnum (OSCTXT *pctxt, 
   const char* name, const GSMRRMBSEnum* pvalue);

EXTERN const OSUTF8CHAR* GSMRRMBSEnum_ToString (OSINT32 value);

EXTERN int GSMRRMBSEnum_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, GSMRRMBSEnum* pvalue);

EXTERN int GSMRRMBSEnum_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, GSMRRMBSEnum* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRGSM400Struct_bandsSupported                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRGSM400Struct'
*/
typedef enum {
   GSMRRGSM400Struct_bandsSupported_band1 = 1,
   GSMRRGSM400Struct_bandsSupported_band2 = 2,
   GSMRRGSM400Struct_bandsSupported_band3 = 3
} GSMRRGSM400Struct_bandsSupported;

EXTERN int NASEnc_GSMRRGSM400Struct_bandsSupported (OSCTXT* pctxt
   , GSMRRGSM400Struct_bandsSupported value);

EXTERN int NASDec_GSMRRGSM400Struct_bandsSupported (OSCTXT* pctxt
   , GSMRRGSM400Struct_bandsSupported* pvalue);

EXTERN int asn1PrtToStrm_GSMRRGSM400Struct_bandsSupported (OSCTXT *pctxt, 
   const char* name, const GSMRRGSM400Struct_bandsSupported* pvalue);

EXTERN const OSUTF8CHAR* GSMRRGSM400Struct_bandsSupported_ToString (OSINT32 value);

EXTERN int GSMRRGSM400Struct_bandsSupported_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, GSMRRGSM400Struct_bandsSupported* pvalue);

EXTERN int GSMRRGSM400Struct_bandsSupported_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      GSMRRGSM400Struct_bandsSupported* pvalue);

/**************************************************************/
/*                                                            */
/*  MCCMNCPair                                                */
/*                                                            */
/**************************************************************/
/*
 MCC/MNC pair

MCCMNCPair ::= SEQUENCE {
   mcc [0] TBCDString3,
   mnc [1] TBCDString3
}
*/
typedef struct EXTERN MCCMNCPair {
   TBCDString3 mcc;
   TBCDString3 mnc;
} MCCMNCPair;

EXTERN int NASEnc_MCCMNCPair (OSCTXT* pctxt, MCCMNCPair* pvalue);

EXTERN int NASDec_MCCMNCPair (OSCTXT* pctxt, MCCMNCPair* pvalue);

EXTERN int asn1PrtToStrm_MCCMNCPair (OSCTXT *pctxt, 
   const char* name, const MCCMNCPair* pvalue);

EXTERN void asn1Init_MCCMNCPair (MCCMNCPair* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileIdentity_TMGI                                  */
/*                                                            */
/**************************************************************/
/*
GSMRRMobileIdentity-TMGI ::= SEQUENCE {
   mbmsSessIdInd [0] BOOLEAN,
   mccMncInd [1] BOOLEAN,
   mbmsServiceID [2] OCTET STRING (SIZE (3)),
   mcc-mnc [3] MCCMNCPair,
   mbmsSessionID [4] INTEGER (0..255)
}
*/
typedef struct EXTERN GSMRRMobileIdentity_TMGI {
   OSBOOL mbmsSessIdInd;
   OSBOOL mccMncInd;
   OSOCTET mbmsServiceID[3];
   MCCMNCPair mcc_mnc;
   OSUINT8 mbmsSessionID;
} GSMRRMobileIdentity_TMGI;

EXTERN int NASEnc_GSMRRMobileIdentity_TMGI (OSCTXT* pctxt
   , GSMRRMobileIdentity_TMGI* pvalue);

EXTERN int NASDec_GSMRRMobileIdentity_TMGI (OSCTXT* pctxt
   , GSMRRMobileIdentity_TMGI* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileIdentity_TMGI (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileIdentity_TMGI* pvalue);

EXTERN void asn1Init_GSMRRMobileIdentity_TMGI (GSMRRMobileIdentity_TMGI* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileIdentity                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRMobileIdentity ::= CHOICE {
   imsi [0] GSMRR-IMSI,
   imei [1] GSMRR-IMEI,
   imeisv [2] GSMRR-IMEISV,
   tmsi [3] OCTET STRING (SIZE (4)),
   tmgi [4] GSMRRMobileIdentity-TMGI
}
*/
typedef struct EXTERN GSMRRMobileIdentity {
   enum {
      T_GSMRRMobileIdentity_UNKNOWN_ = 0,
      T_GSMRRMobileIdentity_imsi = 1,
      T_GSMRRMobileIdentity_imei = 2,
      T_GSMRRMobileIdentity_imeisv = 3,
      T_GSMRRMobileIdentity_tmsi = 4,
      T_GSMRRMobileIdentity_tmgi = 5
   } t;
   union {
      /* t = 1 */
      GSMRR_IMSI imsi;
      /* t = 2 */
      GSMRR_IMEI imei;
      /* t = 3 */
      GSMRR_IMEISV imeisv;
      /* t = 4 */
      OSOCTET tmsi[4];
      /* t = 5 */
      GSMRRMobileIdentity_TMGI tmgi;
   } u;
} GSMRRMobileIdentity;

EXTERN int NASEnc_GSMRRMobileIdentity (OSCTXT* pctxt
   , GSMRRMobileIdentity* pvalue);

EXTERN int NASDec_GSMRRMobileIdentity (OSCTXT* pctxt
   , GSMRRMobileIdentity* pvalue, int iddigit);

EXTERN int asn1PrtToStrm_GSMRRMobileIdentity (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileIdentity* pvalue);

EXTERN void asn1Init_GSMRRMobileIdentity (GSMRRMobileIdentity* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileIdentity_top                                   */
/*                                                            */
/**************************************************************/
/*
GSMRRMobileIdentity_top ::= SEQUENCE {
   lengthmobID [0] INTEGER (0..255),
   iddigit [1] INTEGER (0..15),
   oddevenindic [2] BOOLEAN,
   mobid [3] GSMRRMobileIdentity
}
*/
typedef struct EXTERN GSMRRMobileIdentity_top {
   OSUINT8 lengthmobID;
   OSBOOL oddevenindic;
   GSMRRMobileIdentity mobid;
} GSMRRMobileIdentity_top;

EXTERN int NASEnc_GSMRRMobileIdentity_top (OSCTXT* pctxt
   , GSMRRMobileIdentity_top* pvalue);

EXTERN int NASDec_GSMRRMobileIdentity_top (OSCTXT* pctxt
   , GSMRRMobileIdentity_top* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileIdentity_top (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileIdentity_top* pvalue);

EXTERN void asn1Init_GSMRRMobileIdentity_top (GSMRRMobileIdentity_top* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRPageMode                                             */
/*                                                            */
/**************************************************************/
/*
GSMRRPageMode ::= SEQUENCE {
   spare [0] INTEGER (0..3) DEFAULT 0,
   pm [1] INTEGER (0..3)
}
*/
typedef struct EXTERN GSMRRPageMode {
   OSUINT8 spare;
   OSUINT8 pm;
} GSMRRPageMode;

EXTERN int NASEnc_GSMRRPageMode (OSCTXT* pctxt, GSMRRPageMode* pvalue);

EXTERN int NASDec_GSMRRPageMode (OSCTXT* pctxt, GSMRRPageMode* pvalue);

EXTERN int asn1PrtToStrm_GSMRRPageMode (OSCTXT *pctxt, 
   const char* name, const GSMRRPageMode* pvalue);

EXTERN void asn1Init_GSMRRPageMode (GSMRRPageMode* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRChannelNeeded                                        */
/*                                                            */
/**************************************************************/
/*
GSMRRChannelNeeded ::= SEQUENCE {
   channelsecond [0] INTEGER (0..3),
   channelfirst [1] INTEGER (0..3)
}
*/
typedef struct EXTERN GSMRRChannelNeeded {
   OSUINT8 channelsecond;
   OSUINT8 channelfirst;
} GSMRRChannelNeeded;

EXTERN int NASEnc_GSMRRChannelNeeded (OSCTXT* pctxt, GSMRRChannelNeeded* pvalue
   );

EXTERN int NASDec_GSMRRChannelNeeded (OSCTXT* pctxt, GSMRRChannelNeeded* pvalue
   );

EXTERN int asn1PrtToStrm_GSMRRChannelNeeded (OSCTXT *pctxt, 
   const char* name, const GSMRRChannelNeeded* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRPagingReqType1                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRPagingReqType1 ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   msgType [2] INTEGER (0..255),
   channelneedmob1and2 [3] GSMRRChannelNeeded,
   pagemode [4] GSMRRPageMode,
   mobileIdentity1 [5] GSMRRMobileIdentity_top,
   mobileIdentity2 [6] GSMRRMobileIdentity_top,
   p1restoctets [7] OCTET STRING (SIZE (17))
}
*/
typedef struct EXTERN GSMRRPagingReqType1 {
#define GSM_PAGING_REQ1_MOBILE_IDENTITY2_PRESENT 0x01
   OSUINT32 presence_bitmask;
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 msgType;
   GSMRRChannelNeeded channelneedmob1and2;
   GSMRRPageMode pagemode;
   GSMRRMobileIdentity_top mobileIdentity1;
   GSMRRMobileIdentity_top mobileIdentity2;
   OSOCTET p1restoctets[17];
} GSMRRPagingReqType1;

EXTERN int NASEnc_GSMRRPagingReqType1 (OSCTXT* pctxt
   , GSMRRPagingReqType1* pvalue);

EXTERN int NASDec_GSMRRPagingReqType1 (OSCTXT* pctxt
   , GSMRRPagingReqType1* pvalue);

EXTERN int asn1PrtToStrm_GSMRRPagingReqType1 (OSCTXT *pctxt, 
   const char* name, const GSMRRPagingReqType1* pvalue);

EXTERN void asn1Init_GSMRRPagingReqType1 (GSMRRPagingReqType1* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRPagingReqType2                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRPagingReqType2 ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   pagingreq2msgType [2] INTEGER (0..255),
   channelneedmob1and2 [3] GSMRRChannelNeeded,
   pagemode [4] GSMRRPageMode,
   mobileIdentity1 [5] GSMRRMobileIdentity_top,
   mobileIdentity2 [6] GSMRRMobileIdentity_top,
   mobileIdentity3 [7] GSMRRMobileIdentity_top,
   p2restoctets [8] OCTET STRING (SIZE (11))
}
*/
typedef struct EXTERN GSMRRPagingReqType2 {
#define GSM_PAGING_REQ2_MOBILE_IDENTITY3_PRESENT 0x01
   OSUINT32 presence_bitmask;  
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 pagingreq2msgType;
   GSMRRChannelNeeded channelneedmob1and2;
   GSMRRPageMode pagemode;
   GSMRRMobileIdentity_top mobileIdentity1;
   GSMRRMobileIdentity_top mobileIdentity2;
   GSMRRMobileIdentity_top mobileIdentity3;
   OSOCTET p2restoctets[11];
} GSMRRPagingReqType2;

EXTERN int NASEnc_GSMRRPagingReqType2 (OSCTXT* pctxt
   , GSMRRPagingReqType2* pvalue);

EXTERN int NASDec_GSMRRPagingReqType2 (OSCTXT* pctxt
   , GSMRRPagingReqType2* pvalue);

EXTERN int asn1PrtToStrm_GSMRRPagingReqType2 (OSCTXT *pctxt, 
   const char* name, const GSMRRPagingReqType2* pvalue);

EXTERN void asn1Init_GSMRRPagingReqType2 (GSMRRPagingReqType2* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRPagingReqType3                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRPagingReqType3 ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   pagingreq3msgType [2] INTEGER (0..255),
   channelneedmob1and2 [3] GSMRRChannelNeeded,
   pagemode [4] GSMRRPageMode,
   mobileIdentity1 [5] GSMRRMobileIdentity_top,
   mobileIdentity2 [6] GSMRRMobileIdentity_top,
   mobileIdentity3 [7] GSMRRMobileIdentity_top,
   mobileIdentity4 [8] GSMRRMobileIdentity_top,
   p3restoctets [9] OCTET STRING (SIZE (3))
}
*/
typedef struct EXTERN GSMRRPagingReqType3 {
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 pagingreq3msgType;
   GSMRRChannelNeeded channelneedmob1and2;
   GSMRRPageMode pagemode;
   GSMRRMobileIdentity_top mobileIdentity1;
   GSMRRMobileIdentity_top mobileIdentity2;
   GSMRRMobileIdentity_top mobileIdentity3;
   GSMRRMobileIdentity_top mobileIdentity4;
   OSOCTET p3restoctets[3];
} GSMRRPagingReqType3;

EXTERN int NASEnc_GSMRRPagingReqType3 (OSCTXT* pctxt
   , GSMRRPagingReqType3* pvalue);

EXTERN int NASDec_GSMRRPagingReqType3 (OSCTXT* pctxt
   , GSMRRPagingReqType3* pvalue);

EXTERN int asn1PrtToStrm_GSMRRPagingReqType3 (OSCTXT *pctxt, 
   const char* name, const GSMRRPagingReqType3* pvalue);

EXTERN void asn1Init_GSMRRPagingReqType3 (GSMRRPagingReqType3* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRCipheringKeySeqNum                                   */
/*                                                            */
/**************************************************************/
/*
GSMRRCipheringKeySeqNum ::= SEQUENCE {
   spare [0] BOOLEAN DEFAULT 0,
   keysequence [1] INTEGER (0..7)
}
*/
typedef struct EXTERN GSMRRCipheringKeySeqNum {
   OSBOOL spare;
   OSUINT8 keysequence;
} GSMRRCipheringKeySeqNum;

EXTERN int NASEnc_GSMRRCipheringKeySeqNum (OSCTXT* pctxt
   , GSMRRCipheringKeySeqNum* pvalue);

EXTERN int NASDec_GSMRRCipheringKeySeqNum (OSCTXT* pctxt
   , GSMRRCipheringKeySeqNum* pvalue);

EXTERN int asn1PrtToStrm_GSMRRCipheringKeySeqNum (OSCTXT *pctxt, 
   const char* name, const GSMRRCipheringKeySeqNum* pvalue);

EXTERN void asn1Init_GSMRRCipheringKeySeqNum (GSMRRCipheringKeySeqNum* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileStationClassmark1                              */
/*                                                            */
/**************************************************************/
/*
 10.5.1.5 - Mobile Station Classmark 1 

GSMRRMobileStationClassmark1 ::= SEQUENCE {
   spare [0] BOOLEAN,
   revLevel [1] INTEGER (0..3),
   esInd [2] BOOLEAN,
   a5-1-alg [3] BOOLEAN,
   rfPowerCap [4] INTEGER (0..7)
}
*/
typedef struct EXTERN GSMRRMobileStationClassmark1 {
   OSBOOL spare;
   OSUINT8 revLevel;
   OSBOOL esInd;
   OSBOOL a5_1_alg;
   OSUINT8 rfPowerCap;
} GSMRRMobileStationClassmark1;

EXTERN int NASEnc_GSMRRMobileStationClassmark1 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark1* pvalue);

EXTERN int NASDec_GSMRRMobileStationClassmark1 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark1* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileStationClassmark1 (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileStationClassmark1* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileStationClassmark2_octet4                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMobileStationClassmark2'
*/
typedef struct EXTERN GSMRRMobileStationClassmark2_octet4 {
   OSBOOL spare;
   OSBOOL psCapability;
   OSUINT8 ssScreeningInd;
   OSBOOL smCapability;
   OSBOOL vbsNotifRecept;
   OSBOOL vgcsNotifRecept;
   OSBOOL fcFreqCap;
} GSMRRMobileStationClassmark2_octet4;

EXTERN int NASEnc_GSMRRMobileStationClassmark2_octet4 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark2_octet4* pvalue);

EXTERN int NASDec_GSMRRMobileStationClassmark2_octet4 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark2_octet4* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileStationClassmark2_octet4 (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileStationClassmark2_octet4* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileStationClassmark2_octet5                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMobileStationClassmark2'
*/
typedef struct EXTERN GSMRRMobileStationClassmark2_octet5 {
   OSBOOL cm3;
   OSBOOL spare;
   OSBOOL lcsvaCap;
   OSBOOL ucs2Treatment;
   OSBOOL soLSA;
   OSBOOL cmsp;
   OSBOOL a5_3_alg;
   OSBOOL a5_2_alg;
} GSMRRMobileStationClassmark2_octet5;

EXTERN int NASEnc_GSMRRMobileStationClassmark2_octet5 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark2_octet5* pvalue);

EXTERN int NASDec_GSMRRMobileStationClassmark2_octet5 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark2_octet5* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileStationClassmark2_octet5 (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileStationClassmark2_octet5* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileStationClassmark2                              */
/*                                                            */
/**************************************************************/
/*
 10.5.1.6 - Mobile Station Classmark 2 

GSMRRMobileStationClassmark2 ::= SEQUENCE {
   lengthmobilestationclassmark2 [0] INTEGER (0..255),
   cm1 [1] GSMRRMobileStationClassmark1,
   octet4 [2] SEQUENCE {
      spare [0] BOOLEAN,
      psCapability [1] BOOLEAN,
      ssScreeningInd [2] INTEGER (0..3),
      smCapability [3] BOOLEAN,
      vbsNotifRecept [4] BOOLEAN,
      vgcsNotifRecept [5] BOOLEAN,
      fcFreqCap [6] BOOLEAN
   },
   octet5 [3] SEQUENCE {
      cm3 [0] BOOLEAN,
      spare [1] BOOLEAN,
      lcsvaCap [2] BOOLEAN,
      ucs2Treatment [3] BOOLEAN,
      soLSA [4] BOOLEAN,
      cmsp [5] BOOLEAN,
      a5-3-alg [6] BOOLEAN,
      a5-2-alg [7] BOOLEAN
   }
}
*/
typedef struct EXTERN GSMRRMobileStationClassmark2 {
   OSUINT8 lengthmobilestationclassmark2;
   GSMRRMobileStationClassmark1 cm1;
   GSMRRMobileStationClassmark2_octet4 octet4;
   GSMRRMobileStationClassmark2_octet5 octet5;
} GSMRRMobileStationClassmark2;

EXTERN int NASEnc_GSMRRMobileStationClassmark2 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark2* pvalue);

EXTERN int NASDec_GSMRRMobileStationClassmark2 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark2* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileStationClassmark2 (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileStationClassmark2* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRPagingResp                                           */
/*                                                            */
/**************************************************************/
/*
GSMRRPagingResp ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   pagingrespmsgType [2] INTEGER (0..255),
   sparehalfoctet [3] INTEGER (0..15) DEFAULT 0,
   cipheringkeyseqnum [4] GSMRRCipheringKeySeqNum,
   mobilestationclassmark2 [5] GSMRRMobileStationClassmark2,
   mobileIdentity [6] GSMRRMobileIdentity_top
}
*/
typedef struct EXTERN GSMRRPagingResp {
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 pagingrespmsgType;
   OSUINT8 sparehalfoctet;
   GSMRRCipheringKeySeqNum cipheringkeyseqnum;
   GSMRRMobileStationClassmark2 mobilestationclassmark2;
   GSMRRMobileIdentity_top mobileIdentity;
} GSMRRPagingResp;

EXTERN int NASEnc_GSMRRPagingResp (OSCTXT* pctxt, GSMRRPagingResp* pvalue);

EXTERN int NASDec_GSMRRPagingResp (OSCTXT* pctxt, GSMRRPagingResp* pvalue);

EXTERN int asn1PrtToStrm_GSMRRPagingResp (OSCTXT *pctxt, 
   const char* name, const GSMRRPagingResp* pvalue);

EXTERN void asn1Init_GSMRRPagingResp (GSMRRPagingResp* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet2                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet2 {
   OSBOOL baUsed;
   OSBOOL dtxUsed;
   OSUINT8 rxlevFullServingCell;
} GSMRRMeasurementResults_octet2;

EXTERN int NASEnc_GSMRRMeasurementResults_octet2 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet2* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet2 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet2* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet2 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet2* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet3                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet3 {
   OSBOOL baUsed3g;
   OSBOOL measvalid;
   OSUINT8 rxlevSubServingCell;
} GSMRRMeasurementResults_octet3;

EXTERN int NASEnc_GSMRRMeasurementResults_octet3 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet3* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet3 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet3* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet3 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet3* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet4                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet4 {
   OSBOOL spare;
   OSUINT8 rxqualFullServingCell;
   OSUINT8 rxqualSubServingCell;
   OSBOOL noNCellMHighPart;
} GSMRRMeasurementResults_octet4;

EXTERN int NASEnc_GSMRRMeasurementResults_octet4 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet4* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet4 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet4* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet4 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet4* pvalue);

EXTERN void asn1Init_GSMRRMeasurementResults_octet4 (
   GSMRRMeasurementResults_octet4* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet5                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet5 {
   OSUINT8 noNCellMLowPart;
   OSUINT8 rxlevNCell1;
} GSMRRMeasurementResults_octet5;

EXTERN int NASEnc_GSMRRMeasurementResults_octet5 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet5* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet5 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet5* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet5 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet5* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet6                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet6 {
   OSUINT8 bcchFreqNCell1;
   OSUINT8 bsicNCell1HighPart;
} GSMRRMeasurementResults_octet6;

EXTERN int NASEnc_GSMRRMeasurementResults_octet6 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet6* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet6 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet6* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet6 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet6* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet7                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet7 {
   OSUINT8 bsicNCellLowPart;
   OSUINT8 rxlevNCell2HighPart;
} GSMRRMeasurementResults_octet7;

EXTERN int NASEnc_GSMRRMeasurementResults_octet7 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet7* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet7 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet7* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet7 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet7* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet8                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet8 {
   OSBOOL rxlevNCell2LowPart;
   OSUINT8 bcchFreqNCell2;
   OSUINT8 bsicNCell2HighPart;
} GSMRRMeasurementResults_octet8;

EXTERN int NASEnc_GSMRRMeasurementResults_octet8 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet8* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet8 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet8* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet8 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet8* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet9                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet9 {
   OSUINT8 bsicNCell2LowPart;
   OSUINT8 rxlevNCell3HighPart;
} GSMRRMeasurementResults_octet9;

EXTERN int NASEnc_GSMRRMeasurementResults_octet9 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet9* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet9 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet9* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet9 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet9* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet10                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet10 {
   OSUINT8 rxlevNCell3LowPart;
   OSUINT8 bcchFreqNCell3;
   OSBOOL bsicNCell3HighPart;
} GSMRRMeasurementResults_octet10;

EXTERN int NASEnc_GSMRRMeasurementResults_octet10 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet10* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet10 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet10* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet10 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet10* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet11                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet11 {
   OSUINT8 bsicNCell3HighPart;
   OSUINT8 rxlevNCell4HighPart;
} GSMRRMeasurementResults_octet11;

EXTERN int NASEnc_GSMRRMeasurementResults_octet11 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet11* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet11 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet11* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet11 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet11* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet12                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet12 {
   OSUINT8 rxlevNCell4LowPart;
   OSUINT8 bcchFreqNCell4;
} GSMRRMeasurementResults_octet12;

EXTERN int NASEnc_GSMRRMeasurementResults_octet12 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet12* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet12 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet12* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet12 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet12* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet13                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet13 {
   OSUINT8 bsicNCell4;
   OSUINT8 rxlevNCell5HighPart;
} GSMRRMeasurementResults_octet13;

EXTERN int NASEnc_GSMRRMeasurementResults_octet13 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet13* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet13 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet13* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet13 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet13* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet14                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet14 {
   OSUINT8 rxlevNCell5LowPart;
   OSUINT8 bcchFreqNCell5HighPart;
} GSMRRMeasurementResults_octet14;

EXTERN int NASEnc_GSMRRMeasurementResults_octet14 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet14* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet14 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet14* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet14 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet14* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet15                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet15 {
   OSBOOL bcchFreqNCell5LowPart;
   OSUINT8 bsicNCell5;
   OSBOOL rxlevNCell6HighPart;
} GSMRRMeasurementResults_octet15;

EXTERN int NASEnc_GSMRRMeasurementResults_octet15 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet15* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet15 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet15* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet15 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet15* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet16                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet16 {
   OSUINT8 rxlevNCell6LowPart;
   OSUINT8 bcchFreqNCell6HighPart;
} GSMRRMeasurementResults_octet16;

EXTERN int NASEnc_GSMRRMeasurementResults_octet16 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet16* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet16 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet16* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet16 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet16* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults_octet17                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMeasurementResults'
*/
typedef struct EXTERN GSMRRMeasurementResults_octet17 {
   OSUINT8 bcchFreqNCell6LowPart;
   OSUINT8 bsicNCell6;
} GSMRRMeasurementResults_octet17;

EXTERN int NASEnc_GSMRRMeasurementResults_octet17 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet17* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults_octet17 (OSCTXT* pctxt
   , GSMRRMeasurementResults_octet17* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults_octet17 (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults_octet17* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementResults                                   */
/*                                                            */
/**************************************************************/
/*
GSMRRMeasurementResults ::= SEQUENCE {
   octet2 [0] SEQUENCE {
      baUsed [0] BOOLEAN,
      dtxUsed [1] BOOLEAN,
      rxlevFullServingCell [2] INTEGER (0..63)
   },
   octet3 [1] SEQUENCE {
      baUsed3g [0] BOOLEAN,
      measvalid [1] BOOLEAN,
      rxlevSubServingCell [2] INTEGER (0..63)
   },
   octet4 [2] SEQUENCE {
      spare [0] BOOLEAN DEFAULT 0,
      rxqualFullServingCell [1] INTEGER (0..7),
      rxqualSubServingCell [2] INTEGER (0..7),
      noNCellMHighPart [3] BOOLEAN
   },
   octet5 [3] SEQUENCE {
      noNCellMLowPart [0] INTEGER (0..3),
      rxlevNCell1 [1] INTEGER (0..63)
   },
   octet6 [4] SEQUENCE {
      bcchFreqNCell1 [0] INTEGER (0..31),
      bsicNCell1HighPart [1] INTEGER (0..7)
   },
   octet7 [5] SEQUENCE {
      bsicNCellLowPart [0] INTEGER (0..7),
      rxlevNCell2HighPart [1] INTEGER (0..31)
   },
   octet8 [6] SEQUENCE {
      rxlevNCell2LowPart [0] BOOLEAN,
      bcchFreqNCell2 [1] INTEGER (0..31),
      bsicNCell2HighPart [2] INTEGER (0..3)
   },
   octet9 [7] SEQUENCE {
      bsicNCell2LowPart [0] INTEGER (0..15),
      rxlevNCell3HighPart [1] INTEGER (0..15)
   },
   octet10 [8] SEQUENCE {
      rxlevNCell3LowPart [0] INTEGER (0..3),
      bcchFreqNCell3 [1] INTEGER (0..31),
      bsicNCell3HighPart [2] BOOLEAN
   },
   octet11 [9] SEQUENCE {
      bsicNCell3HighPart [0] INTEGER (0..31),
      rxlevNCell4HighPart [1] INTEGER (0..7)
   },
   octet12 [10] SEQUENCE {
      rxlevNCell4LowPart [0] INTEGER (0..7),
      bcchFreqNCell4 [1] INTEGER (0..31)
   },
   octet13 [11] SEQUENCE {
      bsicNCell4 [0] INTEGER (0..63),
      rxlevNCell5HighPart [1] INTEGER (0..3)
   },
   octet14 [12] SEQUENCE {
      rxlevNCell5LowPart [0] INTEGER (0..15),
      bcchFreqNCell5HighPart [1] INTEGER (0..15)
   },
   octet15 [13] SEQUENCE {
      bcchFreqNCell5LowPart [0] BOOLEAN,
      bsicNCell5 [1] INTEGER (0..63),
      rxlevNCell6HighPart [2] BOOLEAN
   },
   octet16 [14] SEQUENCE {
      rxlevNCell6LowPart [0] INTEGER (0..31),
      bcchFreqNCell6HighPart [1] INTEGER (0..7)
   },
   octet17 [15] SEQUENCE {
      bcchFreqNCell6LowPart [0] INTEGER (0..3),
      bsicNCell6 [1] INTEGER (0..63)
   }
}
*/
typedef struct EXTERN GSMRRMeasurementResults {
   GSMRRMeasurementResults_octet2 octet2;
   GSMRRMeasurementResults_octet3 octet3;
   GSMRRMeasurementResults_octet4 octet4;
   GSMRRMeasurementResults_octet5 octet5;
   GSMRRMeasurementResults_octet6 octet6;
   GSMRRMeasurementResults_octet7 octet7;
   GSMRRMeasurementResults_octet8 octet8;
   GSMRRMeasurementResults_octet9 octet9;
   GSMRRMeasurementResults_octet10 octet10;
   GSMRRMeasurementResults_octet11 octet11;
   GSMRRMeasurementResults_octet12 octet12;
   GSMRRMeasurementResults_octet13 octet13;
   GSMRRMeasurementResults_octet14 octet14;
   GSMRRMeasurementResults_octet15 octet15;
   GSMRRMeasurementResults_octet16 octet16;
   GSMRRMeasurementResults_octet17 octet17;
} GSMRRMeasurementResults;

EXTERN int NASEnc_GSMRRMeasurementResults (OSCTXT* pctxt
   , GSMRRMeasurementResults* pvalue);

EXTERN int NASDec_GSMRRMeasurementResults (OSCTXT* pctxt
   , GSMRRMeasurementResults* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementResults (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementResults* pvalue);


EXTERN void asn1Init_GSMRRMeasurementResults (GSMRRMeasurementResults* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMeasurementReport                                    */
/*                                                            */
/**************************************************************/
/*
GSMRRMeasurementReport ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   measurementreportmsgType [2] INTEGER (0..255),
   measurementresults [3] GSMRRMeasurementResults
}
*/
typedef struct EXTERN GSMRRMeasurementReport {
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 measurementreportmsgType;
   GSMRRMeasurementResults measurementresults;
} GSMRRMeasurementReport;

EXTERN int NASEnc_GSMRRMeasurementReport (OSCTXT* pctxt
   , GSMRRMeasurementReport* pvalue);

EXTERN int NASDec_GSMRRMeasurementReport (OSCTXT* pctxt
   , GSMRRMeasurementReport* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMeasurementReport (OSCTXT *pctxt, 
   const char* name, const GSMRRMeasurementReport* pvalue);


EXTERN void asn1Init_GSMRRMeasurementReport (GSMRRMeasurementReport* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRCipheringModeSetting                                 */
/*                                                            */
/**************************************************************/
/*
GSMRRCipheringModeSetting ::= SEQUENCE {
   algorithmidentifier [0] INTEGER (0..7),
   sc [1] BOOLEAN
}
*/
typedef struct EXTERN GSMRRCipheringModeSetting {
   OSUINT8 algorithmidentifier;
   OSBOOL sc;
} GSMRRCipheringModeSetting;

EXTERN int NASEnc_GSMRRCipheringModeSetting (OSCTXT* pctxt
   , GSMRRCipheringModeSetting* pvalue);

EXTERN int NASDec_GSMRRCipheringModeSetting (OSCTXT* pctxt
   , GSMRRCipheringModeSetting* pvalue);

EXTERN int asn1PrtToStrm_GSMRRCipheringModeSetting (OSCTXT *pctxt, 
   const char* name, const GSMRRCipheringModeSetting* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRCipherResponse                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRCipherResponse ::= SEQUENCE {
   spare [0] INTEGER (0..7),
   cr [1] BOOLEAN
}
*/
typedef struct EXTERN GSMRRCipherResponse {
   OSUINT8 spare;
   OSBOOL cr;
} GSMRRCipherResponse;

EXTERN int NASEnc_GSMRRCipherResponse (OSCTXT* pctxt
   , GSMRRCipherResponse* pvalue);

EXTERN int NASDec_GSMRRCipherResponse (OSCTXT* pctxt
   , GSMRRCipherResponse* pvalue);

EXTERN int asn1PrtToStrm_GSMRRCipherResponse (OSCTXT *pctxt, 
   const char* name, const GSMRRCipherResponse* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRMSMeasurementCap                                     */
/*                                                            */
/**************************************************************/
/*
 10.5.1.7 - Mobile Station Classmark 3 

< MS Measurement capability > ::=
	< SMS_VALUE : bit (4) >
	< SM_VALUE : bit (4) > ;


GSMRRMSMeasurementCap ::= SEQUENCE {
   smsValue [0] INTEGER (0..15),
   smValue [1] INTEGER (0..15)
}
*/
typedef struct EXTERN GSMRRMSMeasurementCap {
   OSUINT8 smsValue;
   OSUINT8 smValue;
} GSMRRMSMeasurementCap;

EXTERN int NASEnc_GSMRRMSMeasurementCap (OSCTXT* pctxt
   , GSMRRMSMeasurementCap* pvalue);

EXTERN int NASDec_GSMRRMSMeasurementCap (OSCTXT* pctxt
   , GSMRRMSMeasurementCap* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMSMeasurementCap (OSCTXT *pctxt, 
   const char* name, const GSMRRMSMeasurementCap* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRType8PSKStruct                                       */
/*                                                            */
/**************************************************************/
/*
 Name has to begin with some uppercase letter.

GSMRRType8PSKStruct ::= SEQUENCE {
   modulationCap [0] BOOLEAN,
   rfPowerCap1 [1] INTEGER (0..3) OPTIONAL,
   rfPowerCap2 [2] INTEGER (0..3) OPTIONAL
}
*/
typedef struct EXTERN GSMRRType8PSKStruct {
   struct {
      unsigned rfPowerCap1Present : 1;
      unsigned rfPowerCap2Present : 1;
   } m;
   OSBOOL modulationCap;
   OSUINT8 rfPowerCap1;
   OSUINT8 rfPowerCap2;
} GSMRRType8PSKStruct;

EXTERN int NASEnc_GSMRRType8PSKStruct (OSCTXT* pctxt
   , GSMRRType8PSKStruct* pvalue);

EXTERN int NASDec_GSMRRType8PSKStruct (OSCTXT* pctxt
   , GSMRRType8PSKStruct* pvalue);

EXTERN int asn1PrtToStrm_GSMRRType8PSKStruct (OSCTXT *pctxt, 
   const char* name, const GSMRRType8PSKStruct* pvalue);


EXTERN void asn1Init_GSMRRType8PSKStruct (GSMRRType8PSKStruct* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRGERANIuModeCap                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRGERANIuModeCap ::= SEQUENCE {
   length [0] INTEGER (0..15),
   floIuCap [1] BOOLEAN,
   spareBits [2] BIT STRING  (SIZE (0..14))
}
*/
typedef struct EXTERN GSMRRGERANIuModeCap {
   OSUINT8 length;
   OSBOOL floIuCap;
   struct {
      OSUINT8 numbits;
      OSOCTET data[2];
   } spareBits;
} GSMRRGERANIuModeCap;

EXTERN int NASEnc_GSMRRGERANIuModeCap (OSCTXT* pctxt
   , GSMRRGERANIuModeCap* pvalue);

EXTERN int NASDec_GSMRRGERANIuModeCap (OSCTXT* pctxt
   , GSMRRGERANIuModeCap* pvalue);

EXTERN int asn1PrtToStrm_GSMRRGERANIuModeCap (OSCTXT *pctxt, 
   const char* name, const GSMRRGERANIuModeCap* pvalue);


EXTERN void asn1Init_GSMRRGERANIuModeCap (GSMRRGERANIuModeCap* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRA5Bits                                               */
/*                                                            */
/**************************************************************/
/*

< A5 bits > ::= 
	< A5/7 : bit > < A5/6 : bit > < A5/5 : bit > < A5/4 : bit >  ;


GSMRRA5Bits ::= SEQUENCE {
   a5-7 [0] BOOLEAN,
   a5-6 [1] BOOLEAN,
   a5-5 [2] BOOLEAN,
   a5-4 [3] BOOLEAN
}
*/
typedef struct EXTERN GSMRRA5Bits {
   OSBOOL a5_7;
   OSBOOL a5_6;
   OSBOOL a5_5;
   OSBOOL a5_4;
} GSMRRA5Bits;

EXTERN int NASEnc_GSMRRA5Bits (OSCTXT* pctxt, GSMRRA5Bits* pvalue);

EXTERN int NASDec_GSMRRA5Bits (OSCTXT* pctxt, GSMRRA5Bits* pvalue);

EXTERN int asn1PrtToStrm_GSMRRA5Bits (OSCTXT *pctxt, 
   const char* name, const GSMRRA5Bits* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRMultibandSupported                                   */
/*                                                            */
/**************************************************************/
/*
 MultibandSupported is defined as a separate type to allow a custom NAS
 encode and decode function to be defined to support the following CSN:

{	< Multiband supported : { 000 } >
		< A5 bits > 
|	< Multiband supported : { 101 | 110 } > 
		< A5 bits >
		< Associated Radio Capability 2 : bit(4) >
		< Associated Radio Capability 1 : bit(4) >
|	< Multiband supported : { 001 | 010 | 100 } > 
		< A5 bits >
		< spare bit >(4)
		< Associated Radio Capability 1 : bit(4) > }


GSMRRMultibandSupported ::= SEQUENCE {
   supported [0] GSMRRMBSEnum,
   a5bits [1] GSMRRA5Bits,
   assocRadioCap2 [2] INTEGER (0..15),
   assocRadioCap1 [3] INTEGER (0..15)
}
*/
typedef struct EXTERN GSMRRMultibandSupported {
   GSMRRMBSEnum supported;
   GSMRRA5Bits a5bits;
   OSUINT8 assocRadioCap2;
   OSUINT8 assocRadioCap1;
} GSMRRMultibandSupported;

EXTERN int NASEnc_GSMRRMultibandSupported (OSCTXT* pctxt
   , GSMRRMultibandSupported* pvalue);

EXTERN int NASDec_GSMRRMultibandSupported (OSCTXT* pctxt
   , GSMRRMultibandSupported* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMultibandSupported (OSCTXT *pctxt, 
   const char* name, const GSMRRMultibandSupported* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRGSM400Struct                                         */
/*                                                            */
/**************************************************************/
/*

{       < T-GSM 400 Bands Supported : { 01 | 10 | 11 } >
	< T-GSM 400 Associated Radio Capability: bit(4) > }


GSMRRGSM400Struct ::= SEQUENCE {
   bandsSupported [0] ENUMERATED { band1(1), band2(2), band3(3) } (0..3),
   assocRadioCap [1] INTEGER (0..15)
}
*/
typedef struct EXTERN GSMRRGSM400Struct {
   GSMRRGSM400Struct_bandsSupported bandsSupported;
   OSUINT8 assocRadioCap;
} GSMRRGSM400Struct;

EXTERN int NASEnc_GSMRRGSM400Struct (OSCTXT* pctxt, GSMRRGSM400Struct* pvalue);

EXTERN int NASDec_GSMRRGSM400Struct (OSCTXT* pctxt, GSMRRGSM400Struct* pvalue);

EXTERN int asn1PrtToStrm_GSMRRGSM400Struct (OSCTXT *pctxt, 
   const char* name, const GSMRRGSM400Struct* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRDTMGPRSStruct                                        */
/*                                                            */
/**************************************************************/
/*

{ 	< DTM GPRS Multi Slot Class : bit(2) >
	< Single Slot DTM : bit >
	{0 | 1 < DTM EGPRS Multi Slot Class : bit(2) > } } 


GSMRRDTMGPRSStruct ::= SEQUENCE {
   dtmGPRSMultiSlotClass [0] INTEGER (0..3),
   singleSlotDTM [1] BOOLEAN,
   dtmEGPRSMultiSlotClass [2] INTEGER (0..3) OPTIONAL
}
*/
typedef struct EXTERN GSMRRDTMGPRSStruct {
   struct {
      unsigned dtmEGPRSMultiSlotClassPresent : 1;
   } m;
   OSUINT8 dtmGPRSMultiSlotClass;
   OSBOOL singleSlotDTM;
   OSUINT8 dtmEGPRSMultiSlotClass;
} GSMRRDTMGPRSStruct;

EXTERN int NASEnc_GSMRRDTMGPRSStruct (OSCTXT* pctxt, GSMRRDTMGPRSStruct* pvalue
   );

EXTERN int NASDec_GSMRRDTMGPRSStruct (OSCTXT* pctxt, GSMRRDTMGPRSStruct* pvalue
   );

EXTERN int asn1PrtToStrm_GSMRRDTMGPRSStruct (OSCTXT *pctxt, 
   const char* name, const GSMRRDTMGPRSStruct* pvalue);


EXTERN void asn1Init_GSMRRDTMGPRSStruct (GSMRRDTMGPRSStruct* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileStationClassmark3_extDtmGPRSStruct             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMobileStationClassmark3'
*/
typedef struct EXTERN GSMRRMobileStationClassmark3_extDtmGPRSStruct {
   OSUINT8 extDtmGPRSMultiSlotClass;
   OSUINT8 extDtmEGPRSMultiSlotClass;
} GSMRRMobileStationClassmark3_extDtmGPRSStruct;

EXTERN int NASEnc_GSMRRMobileStationClassmark3_extDtmGPRSStruct (OSCTXT* pctxt
   , GSMRRMobileStationClassmark3_extDtmGPRSStruct* pvalue);

EXTERN int NASDec_GSMRRMobileStationClassmark3_extDtmGPRSStruct (OSCTXT* pctxt
   , GSMRRMobileStationClassmark3_extDtmGPRSStruct* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileStationClassmark3_extDtmGPRSStruct (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileStationClassmark3_extDtmGPRSStruct* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRMobileStationClassmark3_dtmGPRSStruct2               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GSMRRMobileStationClassmark3'
*/
typedef struct EXTERN GSMRRMobileStationClassmark3_dtmGPRSStruct2 {
   struct {
      unsigned dtmEGPRSHighMultiSlotClassPresent : 1;
   } m;
   OSUINT8 dtmGPRSHighMultiSlotClass;
   OSBOOL offsetRequired;
   OSUINT8 dtmEGPRSHighMultiSlotClass;
} GSMRRMobileStationClassmark3_dtmGPRSStruct2;

EXTERN int NASEnc_GSMRRMobileStationClassmark3_dtmGPRSStruct2 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark3_dtmGPRSStruct2* pvalue);

EXTERN int NASDec_GSMRRMobileStationClassmark3_dtmGPRSStruct2 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark3_dtmGPRSStruct2* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileStationClassmark3_dtmGPRSStruct2 (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileStationClassmark3_dtmGPRSStruct2* pvalue);


EXTERN void asn1Init_GSMRRMobileStationClassmark3_dtmGPRSStruct2 (
   GSMRRMobileStationClassmark3_dtmGPRSStruct2* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRMobileStationClassmark3                              */
/*                                                            */
/**************************************************************/
/*
<aligned/>

GSMRRMobileStationClassmark3 ::= SEQUENCE {
   length [0] INTEGER (0..32),
   spare [1] BOOLEAN,
   multiband [2] GSMRRMultibandSupported,
   rSupport [3] GSMRRRSupport OPTIONAL,
   hscsdMultiSlotCap [4] GSMRRHSCSDMultiSlotCap OPTIONAL,
   ucs2Treatment [5] BOOLEAN,
   extMeasurementCap [6] BOOLEAN,
   msMeasurementCap [7] GSMRRMSMeasurementCap OPTIONAL,
   msPositioningMethodCap [8] INTEGER (0..31) OPTIONAL,
   ecsdMultiSlotCap [9] INTEGER (0..31) OPTIONAL,
   an-8-PSKStruct [10] GSMRRType8PSKStruct OPTIONAL,
   gsm400Struct [11] GSMRRGSM400Struct OPTIONAL,
   gsm850AssocRadioCap [12] INTEGER (0..15) OPTIONAL,
   gsm1900AssocRadioCap [13] INTEGER (0..15) OPTIONAL,
   umtsFDDRadioAccessTechCap [14] BOOLEAN,
   umts384McpsTDDRadioAccessTechCap [15] BOOLEAN,
   cdma2000RadioAccessTechCap [16] BOOLEAN,
   dtmGPRSStruct [17] GSMRRDTMGPRSStruct OPTIONAL,
   singleBandSupport [18] INTEGER (0..15) OPTIONAL,
   gsm750AssocRadioCap [19] INTEGER (0..15) OPTIONAL,
   umts1-28McpsTDDRadioAccessTechCap [20] BOOLEAN,
   geranFeaturePackage1 [21] BOOLEAN,
   extDtmGPRSStruct [22] SEQUENCE {
      extDtmGPRSMultiSlotClass [0] INTEGER (0..3),
      extDtmEGPRSMultiSlotClass [1] INTEGER (0..3)
   } OPTIONAL,
   highMultislotCap [23] INTEGER (0..3) OPTIONAL,
   geranIuModeCap [24] GSMRRGERANIuModeCap OPTIONAL,
   geranFeaturePackage2 [25] BOOLEAN,
   gmskMultislotPowerProfile [26] INTEGER (0..3),
   multislotPowerProfile8PSK [27] INTEGER (0..3),
   tgsm400Struct [28] GSMRRGSM400Struct OPTIONAL,
   zerobit [29] BOOLEAN DEFAULT FALSE,
   downlinkAdvancedRcvrPerf [30] INTEGER (0..3),
   dtmEnhancementsCap [31] BOOLEAN,
   dtmGPRSStruct2 [32] SEQUENCE {
      dtmGPRSHighMultiSlotClass [0] INTEGER (0..7),
      offsetRequired [1] BOOLEAN,
      dtmEGPRSHighMultiSlotClass [2] INTEGER (0..7) OPTIONAL
   } OPTIONAL,
   repeatedACCHCap [33] BOOLEAN,
   gsm710AssocRadioCap [34] INTEGER (0..15) OPTIONAL,
   tgsm810AssocRadioCap [35] INTEGER (0..15) OPTIONAL,
   cipheringModeSettingCap [36] BOOLEAN,
   additionalPositioningCap [37] BOOLEAN,
   e-UTRA-FDD-support [38] BOOLEAN,
   e-UTRA-TDD-support [39] BOOLEAN,
   e-UTRA-MeasAndReportSupport [40] BOOLEAN,
   priorityBasedReselectionSupport [41] BOOLEAN,
   ...,
   [[ 9:
      uTRA-CSG-Cells-Reporting [42] BOOLEAN,
      vAMOS-Level [43] INTEGER (0..3)
   ]],
   [[ 10:
      tighterCapability [44] INTEGER (0..3),
      selCiphOf-DL-SACCH [45] BOOLEAN
   ]],
   spareBits [46] BIT STRING 
}
*/
typedef struct EXTERN GSMRRMobileStationClassmark3 {
   struct {
      unsigned rSupportPresent : 1;
      unsigned hscsdMultiSlotCapPresent : 1;
      unsigned msMeasurementCapPresent : 1;
      unsigned msPositioningMethodCapPresent : 1;
      unsigned ecsdMultiSlotCapPresent : 1;
      unsigned an_8_PSKStructPresent : 1;
      unsigned gsm400StructPresent : 1;
      unsigned gsm850AssocRadioCapPresent : 1;
      unsigned gsm1900AssocRadioCapPresent : 1;
      unsigned dtmGPRSStructPresent : 1;
      unsigned singleBandSupportPresent : 1;
      unsigned gsm750AssocRadioCapPresent : 1;
      unsigned extDtmGPRSStructPresent : 1;
      unsigned highMultislotCapPresent : 1;
      unsigned geranIuModeCapPresent : 1;
      unsigned tgsm400StructPresent : 1;
      unsigned dtmGPRSStruct2Present : 1;
      unsigned gsm710AssocRadioCapPresent : 1;
      unsigned tgsm810AssocRadioCapPresent : 1;
      unsigned _v9ExtPresent : 1;
      unsigned _v10ExtPresent : 1;
      unsigned spareBitsPresent : 1;
   } m;
   OSUINT8 length;
   OSBOOL spare;
   GSMRRMultibandSupported multiband;
   GSMRRRSupport rSupport;
   GSMRRHSCSDMultiSlotCap hscsdMultiSlotCap;
   OSBOOL ucs2Treatment;
   OSBOOL extMeasurementCap;
   GSMRRMSMeasurementCap msMeasurementCap;
   OSUINT8 msPositioningMethodCap;
   OSUINT8 ecsdMultiSlotCap;
   GSMRRType8PSKStruct an_8_PSKStruct;
   GSMRRGSM400Struct gsm400Struct;
   OSUINT8 gsm850AssocRadioCap;
   OSUINT8 gsm1900AssocRadioCap;
   OSBOOL umtsFDDRadioAccessTechCap;
   OSBOOL umts384McpsTDDRadioAccessTechCap;
   OSBOOL cdma2000RadioAccessTechCap;
   GSMRRDTMGPRSStruct dtmGPRSStruct;
   OSUINT8 singleBandSupport;
   OSUINT8 gsm750AssocRadioCap;
   OSBOOL umts1_28McpsTDDRadioAccessTechCap;
   OSBOOL geranFeaturePackage1;
   GSMRRMobileStationClassmark3_extDtmGPRSStruct extDtmGPRSStruct;
   OSUINT8 highMultislotCap;
   GSMRRGERANIuModeCap geranIuModeCap;
   OSBOOL geranFeaturePackage2;
   OSUINT8 gmskMultislotPowerProfile;
   OSUINT8 multislotPowerProfile8PSK;
   GSMRRGSM400Struct tgsm400Struct;
   OSBOOL zerobit;
   OSUINT8 downlinkAdvancedRcvrPerf;
   OSBOOL dtmEnhancementsCap;
   GSMRRMobileStationClassmark3_dtmGPRSStruct2 dtmGPRSStruct2;
   OSBOOL repeatedACCHCap;
   OSUINT8 gsm710AssocRadioCap;
   OSUINT8 tgsm810AssocRadioCap;
   OSBOOL cipheringModeSettingCap;
   OSBOOL additionalPositioningCap;
   OSBOOL e_UTRA_FDD_support;
   OSBOOL e_UTRA_TDD_support;
   OSBOOL e_UTRA_MeasAndReportSupport;
   OSBOOL priorityBasedReselectionSupport;
   OSBOOL uTRA_CSG_Cells_Reporting;
   OSUINT8 vAMOS_Level;
   OSUINT8 tighterCapability;
   OSBOOL selCiphOf_DL_SACCH;
   ASN1DynBitStr spareBits;
} GSMRRMobileStationClassmark3;

EXTERN int NASEnc_GSMRRMobileStationClassmark3 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark3* pvalue);

EXTERN int NASDec_GSMRRMobileStationClassmark3 (OSCTXT* pctxt
   , GSMRRMobileStationClassmark3* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileStationClassmark3 (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileStationClassmark3* pvalue);


EXTERN void asn1Init_GSMRRMobileStationClassmark3 (
   GSMRRMobileStationClassmark3* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRCipheringModeCommand                                 */
/*                                                            */
/**************************************************************/
/*
GSMRRCipheringModeCommand ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   cipheringmodecmdmsgType [2] INTEGER (0..255),
   cipherresponse [3] GSMRRCipherResponse,
   cipheringmodesetting [4] GSMRRCipheringModeSetting
}
*/
typedef struct EXTERN GSMRRCipheringModeCommand {
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 cipheringmodecmdmsgType;
   GSMRRCipherResponse cipherresponse;
   GSMRRCipheringModeSetting cipheringmodesetting;
} GSMRRCipheringModeCommand;

EXTERN int NASEnc_GSMRRCipheringModeCommand (OSCTXT* pctxt
   , GSMRRCipheringModeCommand* pvalue);

EXTERN int NASDec_GSMRRCipheringModeCommand (OSCTXT* pctxt
   , GSMRRCipheringModeCommand* pvalue);

EXTERN int asn1PrtToStrm_GSMRRCipheringModeCommand (OSCTXT *pctxt, 
   const char* name, const GSMRRCipheringModeCommand* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRClassmarkChange                                      */
/*                                                            */
/**************************************************************/
/*
GSMRRClassmarkChange ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   classmarkchangemsgType [2] INTEGER (0..255),
   mobilestationclassmark2 [3] GSMRRMobileStationClassmark2,
   additionalmobilestationclassmarkinfo [4] GSMRRMobileStationClassmark3
}
*/
typedef struct EXTERN GSMRRClassmarkChange {
#define GSM_CLASSMARK_CHANGE_ADDITIONAL_MOBILE_STATION_CLASSMARK_INFO_PRESENT 0x01
   OSUINT32 presence_bitmask;
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 classmarkchangemsgType;
   GSMRRMobileStationClassmark2 mobilestationclassmark2;
   GSMRRMobileStationClassmark3 additionalmobilestationclassmarkinfo;
} GSMRRClassmarkChange;

EXTERN int NASEnc_GSMRRClassmarkChange (OSCTXT* pctxt
   , GSMRRClassmarkChange* pvalue);

EXTERN int NASDec_GSMRRClassmarkChange (OSCTXT* pctxt
   , GSMRRClassmarkChange* pvalue);

EXTERN int asn1PrtToStrm_GSMRRClassmarkChange (OSCTXT *pctxt, 
   const char* name, const GSMRRClassmarkChange* pvalue);


EXTERN void asn1Init_GSMRRClassmarkChange (GSMRRClassmarkChange* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRUtranClassmark                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRUtranClassmark ::= SEQUENCE {
   utranclassmarklength [0] OCTET STRING (SIZE (1)),
   utranclassmarkvalue [1] OCTET STRING (SIZE (200))
}
*/
typedef struct EXTERN GSMRRUtranClassmark {
   OSOCTET utranclassmarklength[1];
   OSOCTET utranclassmarkvalue[200];
} GSMRRUtranClassmark;

EXTERN int NASEnc_GSMRRUtranClassmark (OSCTXT* pctxt
   , GSMRRUtranClassmark* pvalue);

EXTERN int NASDec_GSMRRUtranClassmark (OSCTXT* pctxt
   , GSMRRUtranClassmark* pvalue);

EXTERN int asn1PrtToStrm_GSMRRUtranClassmark (OSCTXT *pctxt, 
   const char* name, const GSMRRUtranClassmark* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRUtranClassmarkChange                                 */
/*                                                            */
/**************************************************************/
/*
GSMRRUtranClassmarkChange ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   utranclassmarkchangemsgType [2] INTEGER (0..255),
   utranclassmark [3] GSMRRUtranClassmark
}
*/
typedef struct EXTERN GSMRRUtranClassmarkChange {
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 utranclassmarkchangemsgType;
   GSMRRUtranClassmark utranclassmark;
} GSMRRUtranClassmarkChange;

EXTERN int NASEnc_GSMRRUtranClassmarkChange (OSCTXT* pctxt
   , GSMRRUtranClassmarkChange* pvalue);

EXTERN int NASDec_GSMRRUtranClassmarkChange (OSCTXT* pctxt
   , GSMRRUtranClassmarkChange* pvalue);

EXTERN int asn1PrtToStrm_GSMRRUtranClassmarkChange (OSCTXT *pctxt, 
   const char* name, const GSMRRUtranClassmarkChange* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRAssignmentComp                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRAssignmentComp ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   assignmentcompmsgType [2] INTEGER (0..255),
   rrcause [3] INTEGER (0..255)
}
*/
typedef struct EXTERN GSMRRAssignmentComp {
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 assignmentcompmsgType;
   OSUINT8 rrcause;
} GSMRRAssignmentComp;

EXTERN int NASEnc_GSMRRAssignmentComp (OSCTXT* pctxt
   , GSMRRAssignmentComp* pvalue);

EXTERN int NASDec_GSMRRAssignmentComp (OSCTXT* pctxt
   , GSMRRAssignmentComp* pvalue);

EXTERN int asn1PrtToStrm_GSMRRAssignmentComp (OSCTXT *pctxt, 
   const char* name, const GSMRRAssignmentComp* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRRoutingAreaIdentification                            */
/*                                                            */
/**************************************************************/
/*
GSMRRRoutingAreaIdentification ::= SEQUENCE {
   mcc-mnc [0] MCCMNCPair,
   lac [1] OCTET STRING (SIZE (2)),
   rac [2] OCTET STRING (SIZE (1))
}
*/
typedef struct EXTERN GSMRRRoutingAreaIdentification {
   MCCMNCPair mcc_mnc;
   OSOCTET lac[2];
   OSOCTET rac[1];
} GSMRRRoutingAreaIdentification;

EXTERN int NASEnc_GSMRRRoutingAreaIdentification (OSCTXT* pctxt
   , GSMRRRoutingAreaIdentification* pvalue);

EXTERN int NASDec_GSMRRRoutingAreaIdentification (OSCTXT* pctxt
   , GSMRRRoutingAreaIdentification* pvalue);

EXTERN int asn1PrtToStrm_GSMRRRoutingAreaIdentification (OSCTXT *pctxt, 
   const char* name, const GSMRRRoutingAreaIdentification* pvalue);


EXTERN void asn1Init_GSMRRRoutingAreaIdentification (
   GSMRRRoutingAreaIdentification* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRServiceSupport                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRServiceSupport ::= SEQUENCE {
   spare [0] INTEGER (0..63) DEFAULT 0,
   mbmsbroadcast [1] INTEGER (0..3)
}
*/
typedef struct EXTERN GSMRRServiceSupport {
   OSUINT8 spare;
   OSUINT8 mbmsbroadcast;
} GSMRRServiceSupport;

EXTERN int NASEnc_GSMRRServiceSupport (OSCTXT* pctxt
   , GSMRRServiceSupport* pvalue);

EXTERN int NASDec_GSMRRServiceSupport (OSCTXT* pctxt
   , GSMRRServiceSupport* pvalue);

EXTERN int asn1PrtToStrm_GSMRRServiceSupport (OSCTXT *pctxt, 
   const char* name, const GSMRRServiceSupport* pvalue);


EXTERN void asn1Init_GSMRRServiceSupport (GSMRRServiceSupport* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRGPRSSuspensionRequest                                */
/*                                                            */
/**************************************************************/
/*
GSMRRGPRSSuspensionRequest ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   gprssuspensionreqmsgType [2] INTEGER (0..255),
   temporarylogicallinkidentity [3] OCTET STRING (SIZE (4)),
   routingareaidentification [4] GSMRRRoutingAreaIdentification,
   suspensioncause [5] INTEGER (0..255),
   servicesupport [6] GSMRRServiceSupport
}
*/
typedef struct EXTERN GSMRRGPRSSuspensionRequest {
#define GSM_GPRS_SUSPENSION_REQUEST_SERVICE_SUPPORT 0x01
   OSUINT32 presence_bitmask;
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 gprssuspensionreqmsgType;
   OSOCTET temporarylogicallinkidentity[4];
   GSMRRRoutingAreaIdentification routingareaidentification;
   OSUINT8 suspensioncause;
   GSMRRServiceSupport servicesupport;
} GSMRRGPRSSuspensionRequest;

EXTERN int NASEnc_GSMRRGPRSSuspensionRequest (OSCTXT* pctxt
   , GSMRRGPRSSuspensionRequest* pvalue);

EXTERN int NASDec_GSMRRGPRSSuspensionRequest (OSCTXT* pctxt
   , GSMRRGPRSSuspensionRequest* pvalue);

EXTERN int asn1PrtToStrm_GSMRRGPRSSuspensionRequest (OSCTXT *pctxt, 
   const char* name, const GSMRRGPRSSuspensionRequest* pvalue);


EXTERN void asn1Init_GSMRRGPRSSuspensionRequest (GSMRRGPRSSuspensionRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRChannelRelease                                       */
/*                                                            */
/**************************************************************/
/*
GSMRRChannelRelease ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   channelreleasemsgType [2] INTEGER (0..255),
   rrcause [3] INTEGER (0..255)
}
*/
typedef struct EXTERN GSMRRChannelRelease {
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 channelreleasemsgType;
   OSUINT8 rrcause;
} GSMRRChannelRelease;

EXTERN int NASEnc_GSMRRChannelRelease (OSCTXT* pctxt
   , GSMRRChannelRelease* pvalue);

EXTERN int NASDec_GSMRRChannelRelease (OSCTXT* pctxt
   , GSMRRChannelRelease* pvalue);

EXTERN int asn1PrtToStrm_GSMRRChannelRelease (OSCTXT *pctxt, 
   const char* name, const GSMRRChannelRelease* pvalue);


/**************************************************************/
/*                                                            */
/*  MAIO                                                      */
/*                                                            */
/**************************************************************/
/*
MAIO ::= SEQUENCE {
   maiohighpart [0] INTEGER (0..15),
   maiolowpart [1] INTEGER (0..3)
}
*/
typedef struct EXTERN MAIO {
   OSUINT8 maiohighpart;
   OSUINT8 maiolowpart;
} MAIO;

EXTERN int NASEnc_MAIO (OSCTXT* pctxt, MAIO* pvalue);

EXTERN int NASDec_MAIO (OSCTXT* pctxt, MAIO* pvalue);

EXTERN int asn1PrtToStrm_MAIO (OSCTXT *pctxt, const char* name, const MAIO* pvalue);


/**************************************************************/
/*                                                            */
/*  MAIO2                                                     */
/*                                                            */
/**************************************************************/
/*
MAIO2 ::= SEQUENCE {
   maiohighpart [0] INTEGER (0..15),
   maiolowpart [1] INTEGER (0..3),
   hsn [2] INTEGER (0..63)
}
*/
typedef struct EXTERN MAIO2 {
   OSUINT8 maiohighpart;
   OSUINT8 maiolowpart;
   OSUINT8 hsn;
} MAIO2;

EXTERN int NASEnc_MAIO2 (OSCTXT* pctxt, MAIO2* pvalue);

EXTERN int NASDec_MAIO2 (OSCTXT* pctxt, MAIO2* pvalue);

EXTERN int asn1PrtToStrm_MAIO2 (OSCTXT *pctxt, const char* name, const MAIO2* pvalue);


/**************************************************************/
/*                                                            */
/*  ARFCN                                                     */
/*                                                            */
/**************************************************************/
/*
ARFCN ::= SEQUENCE {
   spare [0] INTEGER (0..3),
   arfcnhighpart [1] INTEGER (0..3),
   arfcnlowpart [2] INTEGER (0..255)
}
*/
typedef struct EXTERN ARFCN {
   OSUINT8 spare;
   OSUINT8 arfcnhighpart;
   OSUINT8 arfcnlowpart;
} ARFCN;

EXTERN int NASEnc_ARFCN (OSCTXT* pctxt, ARFCN* pvalue);

EXTERN int NASDec_ARFCN (OSCTXT* pctxt, ARFCN* pvalue);

EXTERN int asn1PrtToStrm_ARFCN (OSCTXT *pctxt, const char* name, const ARFCN* pvalue);


EXTERN void asn1Init_ARFCN (ARFCN* pvalue);

/**************************************************************/
/*                                                            */
/*  HoppingChannel                                            */
/*                                                            */
/**************************************************************/
/*
HoppingChannel ::= CHOICE {
   maio [0] MAIO,
   arfcn [1] ARFCN
}
*/
typedef struct EXTERN HoppingChannel {
   enum {
      T_HoppingChannel_UNKNOWN_ = 0,
      T_HoppingChannel_maio = 1,
      T_HoppingChannel_arfcn = 2
   } t;
   union {
      /* t = 1 */
      MAIO maio;
      /* t = 2 */
      ARFCN arfcn;
   } u;
} HoppingChannel;

EXTERN int NASEnc_HoppingChannel (OSCTXT* pctxt, HoppingChannel* pvalue);

EXTERN int NASDec_HoppingChannel (OSCTXT* pctxt, HoppingChannel* pvalue);

EXTERN int asn1PrtToStrm_HoppingChannel (OSCTXT *pctxt, 
   const char* name, const HoppingChannel* pvalue);


EXTERN void asn1Init_HoppingChannel (HoppingChannel* pvalue);

/**************************************************************/
/*                                                            */
/*  HoppingChannel2                                           */
/*                                                            */
/**************************************************************/
/*
HoppingChannel2 ::= CHOICE {
   maio [0] MAIO2,
   arfcn [1] ARFCN
}
*/
typedef struct EXTERN HoppingChannel2 {
   enum {
      T_HoppingChannel2_UNKNOWN_ = 0,
      T_HoppingChannel2_maio = 1,
      T_HoppingChannel2_arfcn = 2
   } t;
   union {
      /* t = 1 */
      MAIO2 maio;
      /* t = 2 */
      ARFCN arfcn;
   } u;
} HoppingChannel2;

EXTERN int NASEnc_HoppingChannel2 (OSCTXT* pctxt, HoppingChannel2* pvalue);

EXTERN int NASDec_HoppingChannel2 (OSCTXT* pctxt, HoppingChannel2* pvalue);

EXTERN int asn1PrtToStrm_HoppingChannel2 (OSCTXT *pctxt, 
   const char* name, const HoppingChannel2* pvalue);


EXTERN void asn1Init_HoppingChannel2 (HoppingChannel2* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRChannelDescription2                                  */
/*                                                            */
/**************************************************************/
/*
GSMRRChannelDescription2 ::= SEQUENCE {
   channeltypeandtdmaoffset [0] INTEGER (0..31),
   tn [1] INTEGER (0..7),
   tsc [2] INTEGER (0..7),
   hoppingchannel [3] HoppingChannel2
}
*/
typedef struct EXTERN GSMRRChannelDescription2 {
   OSUINT8 channeltypeandtdmaoffset;
   OSUINT8 tn;
   OSUINT8 tsc;
   HoppingChannel2 hoppingchannel;
} GSMRRChannelDescription2;

EXTERN int NASEnc_GSMRRChannelDescription2 (OSCTXT* pctxt
   , GSMRRChannelDescription2* pvalue);

EXTERN int NASDec_GSMRRChannelDescription2 (OSCTXT* pctxt
   , GSMRRChannelDescription2* pvalue);

EXTERN int asn1PrtToStrm_GSMRRChannelDescription2 (OSCTXT *pctxt, 
   const char* name, const GSMRRChannelDescription2* pvalue);


EXTERN void asn1Init_GSMRRChannelDescription2 (GSMRRChannelDescription2* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRChannelDescription                                   */
/*                                                            */
/**************************************************************/
/*
GSMRRChannelDescription ::= SEQUENCE {
   channeltypeandtdmaoffset [0] INTEGER (0..31),
   tn [1] INTEGER (0..7),
   tsc [2] INTEGER (0..7),
   hoppingchannel [3] HoppingChannel2
}
*/
typedef struct EXTERN GSMRRChannelDescription {
   OSUINT8 channeltypeandtdmaoffset;
   OSUINT8 tn;
   OSUINT8 tsc;
   HoppingChannel2 hoppingchannel;
} GSMRRChannelDescription;

EXTERN int NASEnc_GSMRRChannelDescription (OSCTXT* pctxt
   , GSMRRChannelDescription* pvalue);

EXTERN int NASDec_GSMRRChannelDescription (OSCTXT* pctxt
   , GSMRRChannelDescription* pvalue);

EXTERN int asn1PrtToStrm_GSMRRChannelDescription (OSCTXT *pctxt, 
   const char* name, const GSMRRChannelDescription* pvalue);


EXTERN void asn1Init_GSMRRChannelDescription (GSMRRChannelDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRFrequencyList                                        */
/*                                                            */
/**************************************************************/
/*
GSMRRFrequencyList ::= SEQUENCE {
   length [0] INTEGER (0..255),
   value [1] OCTET STRING (SIZE (131))
}
*/
typedef struct EXTERN GSMRRFrequencyList {
   OSUINT8 length;
   OSOCTET value[131];
} GSMRRFrequencyList;

EXTERN int NASEnc_GSMRRFrequencyList (OSCTXT* pctxt, GSMRRFrequencyList* pvalue
   );

EXTERN int NASDec_GSMRRFrequencyList (OSCTXT* pctxt, GSMRRFrequencyList* pvalue
   );

EXTERN int asn1PrtToStrm_GSMRRFrequencyList (OSCTXT *pctxt, 
   const char* name, const GSMRRFrequencyList* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRMultislotAllocation                                  */
/*                                                            */
/**************************************************************/
/*
GSMRRMultislotAllocation ::= SEQUENCE {
   length [0] INTEGER (0..255),
   value [1] OCTET STRING (SIZE (11))
}
*/
typedef struct EXTERN GSMRRMultislotAllocation {
   OSUINT8 length;
   OSOCTET value[11];
} GSMRRMultislotAllocation;

EXTERN int NASEnc_GSMRRMultislotAllocation (OSCTXT* pctxt
   , GSMRRMultislotAllocation* pvalue);

EXTERN int NASDec_GSMRRMultislotAllocation (OSCTXT* pctxt
   , GSMRRMultislotAllocation* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMultislotAllocation (OSCTXT *pctxt, 
   const char* name, const GSMRRMultislotAllocation* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRMobileAllocation                                     */
/*                                                            */
/**************************************************************/
/*
GSMRRMobileAllocation ::= SEQUENCE {
   length [0] INTEGER (0..255),
   value [1] OCTET STRING (SIZE (8))
}
*/
typedef struct EXTERN GSMRRMobileAllocation {
   OSUINT8 length;
   OSOCTET value[8];
} GSMRRMobileAllocation;

EXTERN int NASEnc_GSMRRMobileAllocation (OSCTXT* pctxt
   , GSMRRMobileAllocation* pvalue);

EXTERN int NASDec_GSMRRMobileAllocation (OSCTXT* pctxt
   , GSMRRMobileAllocation* pvalue);

EXTERN int asn1PrtToStrm_GSMRRMobileAllocation (OSCTXT *pctxt, 
   const char* name, const GSMRRMobileAllocation* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRStartingTime                                         */
/*                                                            */
/**************************************************************/
/*
GSMRRStartingTime ::= SEQUENCE {
   value [0] OCTET STRING (SIZE (2))
}
*/
typedef struct EXTERN GSMRRStartingTime {
   OSOCTET value[2];
} GSMRRStartingTime;

EXTERN int NASEnc_GSMRRStartingTime (OSCTXT* pctxt, GSMRRStartingTime* pvalue);

EXTERN int NASDec_GSMRRStartingTime (OSCTXT* pctxt, GSMRRStartingTime* pvalue);

EXTERN int asn1PrtToStrm_GSMRRStartingTime (OSCTXT *pctxt, 
   const char* name, const GSMRRStartingTime* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRFrequencyChannelSequence                             */
/*                                                            */
/**************************************************************/
/*
GSMRRFrequencyChannelSequence ::= SEQUENCE {
   value [0] OCTET STRING (SIZE (9))
}
*/
typedef struct EXTERN GSMRRFrequencyChannelSequence {
   OSOCTET value[9];
} GSMRRFrequencyChannelSequence;

EXTERN int NASEnc_GSMRRFrequencyChannelSequence (OSCTXT* pctxt
   , GSMRRFrequencyChannelSequence* pvalue);

EXTERN int NASDec_GSMRRFrequencyChannelSequence (OSCTXT* pctxt
   , GSMRRFrequencyChannelSequence* pvalue);

EXTERN int asn1PrtToStrm_GSMRRFrequencyChannelSequence (OSCTXT *pctxt, 
   const char* name, const GSMRRFrequencyChannelSequence* pvalue);


/**************************************************************/
/*                                                            */
/*  GSMRRPowerCommand                                         */
/*                                                            */
/**************************************************************/
/*
GSMRRPowerCommand ::= SEQUENCE {
   spare [0] BOOLEAN DEFAULT 0,
   epcmode [1] BOOLEAN,
   fpcepc [2] BOOLEAN,
   powerlevel [3] INTEGER (0..31)
}
*/
typedef struct EXTERN GSMRRPowerCommand {
   OSBOOL spare;
   OSBOOL epcmode;
   OSBOOL fpcepc;
   OSUINT8 powerlevel;
} GSMRRPowerCommand;

EXTERN int NASEnc_GSMRRPowerCommand (OSCTXT* pctxt, GSMRRPowerCommand* pvalue);

EXTERN int NASDec_GSMRRPowerCommand (OSCTXT* pctxt, GSMRRPowerCommand* pvalue);

EXTERN int asn1PrtToStrm_GSMRRPowerCommand (OSCTXT *pctxt, 
   const char* name, const GSMRRPowerCommand* pvalue);


EXTERN void asn1Init_GSMRRPowerCommand (GSMRRPowerCommand* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRAssignmentCommand                                    */
/*                                                            */
/**************************************************************/
/*
GSMRRAssignmentCommand ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   assignmentcommandmsgType [2] INTEGER (0..255),
   descriptionofthefirstchannelaftertime [3] GSMRRChannelDescription2,
   powercommand [4] GSMRRPowerCommand,
   freqlistaftertime [5] GSMRRFrequencyList,
   cellchanneldescription [6] OCTET STRING (SIZE (17)),
   descriptionofthemultislotconfig [7] GSMRRMultislotAllocation,
   modeoffirstchannel [8] INTEGER (0..255),
   modeofchannelset2 [9] INTEGER (0..255),
   modeofchannelset3 [10] INTEGER (0..255),
   modeofchannelset4 [11] INTEGER (0..255),
   modeofchannelset5 [12] INTEGER (0..255),
   modeofchannelset6 [13] INTEGER (0..255),
   modeofchannelset7 [14] INTEGER (0..255),
   modeofchannelset8 [15] INTEGER (0..255),
   descriptionofthesecondchannelaftertime [16] GSMRRChannelDescription,
   modeofsecondchannel [17] INTEGER (0..255),
   mobileallocationaftertime [18] GSMRRMobileAllocation,
   startingtime [19] GSMRRStartingTime,
   freqlistbeforetime [20] GSMRRFrequencyList,
   descriptionofthefirstchannelbeforetime [21] GSMRRChannelDescription2,
   descriptionofthesecondchannelbeforetime [22] GSMRRChannelDescription,
   freqchannelsequencebeforetime [23] OCTET STRING (SIZE (9)),
   mobileallocationbeforetime [24] GSMRRMobileAllocation,
   cipheringmodesetting [25] GSMRRCipheringModeSetting
}
*/
typedef struct EXTERN GSMRRAssignmentCommand {
#define GSM_ASSIGNMENT_COMMAND_FREQUENCY_LIST_AFTER_TIME_PRESENT 0x00000001
#define GSM_ASSIGNMENT_COMMAND_CELL_CHANNEL_DESCRIPTION_PRESENT 0x00000002
#define GSM_ASSIGNMENT_COMMAND_DESCRIPTION_OF_MULTISLOT_ALLOCATION_PRESENT 0x00000004
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_FIRST_CHANNEL_PRESENT 0x00000008
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_CHANNEL_SET_2_PRESENT 0x00000010
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_CHANNEL_SET_3_PRESENT 0x00000020
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_CHANNEL_SET_4_PRESENT 0x00000040
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_CHANNEL_SET_5_PRESENT 0x00000080
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_CHANNEL_SET_6_PRESENT 0x00000100
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_CHANNEL_SET_7_PRESENT 0x00000200
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_CHANNEL_SET_8_PRESENT 0x00000400
#define GSM_ASSIGNMENT_COMMAND_DESCRIPTION_OF_SECOND_CHANNEL_AFTER_TIME_PRESENT 0x00000800
#define GSM_ASSIGNMENT_COMMAND_MODE_OF_SECOND_CHANNEL_PRESENT 0x00001000
#define GSM_ASSIGNMENT_COMMAND_MOBILE_ALLOCATION_AFTER_TIME_PRESENT 0x00002000
#define GSM_ASSIGNMENT_COMMAND_STARTING_TIME_PRESENT 0x00004000
#define GSM_ASSIGNMENT_COMMAND_FREQUENCY_LIST_BEFORE_TIME_PRESENT 0x00008000
#define GSM_ASSIGNMENT_COMMAND_DESCRIPTION_OF_FIRST_CHANNEL_BEFORE_TIME_PRESENT 0x00010000
#define GSM_ASSIGNMENT_COMMAND_DESCRIPTION_OF_SECOND_CHANNEL_BEFORE_TIME_PRESENT 0x00020000
#define GSM_ASSIGNMENT_COMMAND_FREQUENCY_CHANNEL_SEQUENCE_BEFORE_TIME_PRESENT 0x00040000
#define GSM_ASSIGNMENT_COMMAND_MOBILE_ALLOCATION_BEFORE_TIME_PRESENT 0x00080000
#define GSM_ASSIGNMENT_COMMAND_CIPHER_MODE_SETTING_TIME_PRESENT 0x00100000
   OSUINT32 presence_bitmask;
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 assignmentcommandmsgType;
   GSMRRChannelDescription2 descriptionofthefirstchannelaftertime;
   GSMRRPowerCommand powercommand;
   GSMRRFrequencyList freqlistaftertime;
   OSOCTET cellchanneldescription[17];
   GSMRRMultislotAllocation descriptionofthemultislotconfig;
   OSUINT8 modeoffirstchannel;
   OSUINT8 modeofchannelset2;
   OSUINT8 modeofchannelset3;
   OSUINT8 modeofchannelset4;
   OSUINT8 modeofchannelset5;
   OSUINT8 modeofchannelset6;
   OSUINT8 modeofchannelset7;
   OSUINT8 modeofchannelset8;
   GSMRRChannelDescription descriptionofthesecondchannelaftertime;
   OSUINT8 modeofsecondchannel;
   GSMRRMobileAllocation mobileallocationaftertime;
   GSMRRStartingTime startingtime;
   GSMRRFrequencyList freqlistbeforetime;
   GSMRRChannelDescription2 descriptionofthefirstchannelbeforetime;
   GSMRRChannelDescription descriptionofthesecondchannelbeforetime;
   OSOCTET freqchannelsequencebeforetime[9];
   GSMRRMobileAllocation mobileallocationbeforetime;
   GSMRRCipheringModeSetting cipheringmodesetting;
} GSMRRAssignmentCommand;

EXTERN int NASEnc_GSMRRAssignmentCommand (OSCTXT* pctxt
   , GSMRRAssignmentCommand* pvalue);

EXTERN int NASDec_GSMRRAssignmentCommand (OSCTXT* pctxt
   , GSMRRAssignmentCommand* pvalue);

EXTERN int asn1PrtToStrm_GSMRRAssignmentCommand (OSCTXT *pctxt, 
   const char* name, const GSMRRAssignmentCommand* pvalue);


EXTERN void asn1Init_GSMRRAssignmentCommand (GSMRRAssignmentCommand* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRDedicatedModeOrTbf                                   */
/*                                                            */
/**************************************************************/
/*
GSMRRDedicatedModeOrTbf ::= SEQUENCE {
   spare [0] BOOLEAN DEFAULT 0,
   tma [1] BOOLEAN,
   downlink [2] BOOLEAN,
   tbfordedicated [3] BOOLEAN
}
*/
typedef struct EXTERN GSMRRDedicatedModeOrTbf {
   OSBOOL spare;
   OSBOOL tma;
   OSBOOL downlink;
   OSBOOL tbfordedicated;
} GSMRRDedicatedModeOrTbf;

EXTERN int NASEnc_GSMRRDedicatedModeOrTbf (OSCTXT* pctxt
   , GSMRRDedicatedModeOrTbf* pvalue);

EXTERN int NASDec_GSMRRDedicatedModeOrTbf (OSCTXT* pctxt
   , GSMRRDedicatedModeOrTbf* pvalue);

EXTERN int asn1PrtToStrm_GSMRRDedicatedModeOrTbf (OSCTXT *pctxt, 
   const char* name, const GSMRRDedicatedModeOrTbf* pvalue);


EXTERN void asn1Init_GSMRRDedicatedModeOrTbf (GSMRRDedicatedModeOrTbf* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRChannelDescriptionChoice                             */
/*                                                            */
/**************************************************************/
/*
GSMRRChannelDescriptionChoice ::= CHOICE {
   channeldescription [0] GSMRRChannelDescription,
   packetchanneldescription [1] OCTET STRING (SIZE (3))
}
*/
typedef struct EXTERN GSMRRChannelDescriptionChoice {
   enum {
      T_GSMRRChannelDescriptionChoice_UNKNOWN_ = 0,
      T_GSMRRChannelDescriptionChoice_channeldescription = 1,
      T_GSMRRChannelDescriptionChoice_packetchanneldescription = 2
   } t;
   union {
      /* t = 1 */
      GSMRRChannelDescription channeldescription;
      /* t = 2 */
      OSOCTET packetchanneldescription[3];
   } u;
} GSMRRChannelDescriptionChoice;

EXTERN int NASEnc_GSMRRChannelDescriptionChoice (OSCTXT* pctxt
   , GSMRRChannelDescriptionChoice* pvalue);

EXTERN int NASDec_GSMRRChannelDescriptionChoice (OSCTXT* pctxt
   , GSMRRChannelDescriptionChoice* pvalue);

EXTERN int asn1PrtToStrm_GSMRRChannelDescriptionChoice (OSCTXT *pctxt, 
   const char* name, const GSMRRChannelDescriptionChoice* pvalue);


EXTERN void asn1Init_GSMRRChannelDescriptionChoice (
   GSMRRChannelDescriptionChoice* pvalue);

/**************************************************************/
/*                                                            */
/*  GSMRRRequestReference                                     */
/*                                                            */
/**************************************************************/
/*
GSMRRRequestReference ::= SEQUENCE {
   randomaccessinfo [0] INTEGER (0..255),
   t1 [1] INTEGER (0..31),
   t3high [2] INTEGER (0..7),
   t3low [3] INTEGER (0..7),
   t2 [4] INTEGER (0..31)
}
*/
typedef struct EXTERN GSMRRRequestReference {
   OSUINT8 randomaccessinfo;
   OSUINT8 t1;
   OSUINT8 t3high;
   OSUINT8 t3low;
   OSUINT8 t2;
} GSMRRRequestReference;

EXTERN int NASEnc_GSMRRRequestReference (OSCTXT* pctxt
   , GSMRRRequestReference* pvalue);

EXTERN int NASDec_GSMRRRequestReference (OSCTXT* pctxt
   , GSMRRRequestReference* pvalue);

EXTERN int asn1PrtToStrm_GSMRRRequestReference (OSCTXT *pctxt, 
   const char* name, const GSMRRRequestReference* pvalue);


/**************************************************************/
/*                                                            */
/*  ImmediateAssign                                           */
/*                                                            */
/**************************************************************/
/*
ImmediateAssign ::= SEQUENCE {
   skipInd [0] INTEGER (0..15),
   protoDiscr [1] GSMRRProtoDiscr,
   immediateassignmsgType [2] INTEGER (0..255),
   pagemode [3] GSMRRPageMode,
   dedicatedmodeortbf [4] GSMRRDedicatedModeOrTbf,
   channeldescriptionchoice [5] GSMRRChannelDescriptionChoice,
   requestreference [6] GSMRRRequestReference,
   timingadvance [7] OCTET STRING (SIZE (1)),
   mobileallocation [8] GSMRRMobileAllocation,
   startingtime [9] GSMRRStartingTime,
   iarestoctets [10] OCTET STRING (SIZE (11))
}
*/
typedef struct EXTERN ImmediateAssign {
#define GSM_IMMEDIATE_ASSIGNMENT_STARTING_TIME_PRESENT 0x01
   OSUINT32 presence_bitmask;
   OSUINT8 skipInd;
   GSMRRProtoDiscr protoDiscr;
   OSUINT8 immediateassignmsgType;
   GSMRRPageMode pagemode;
   GSMRRDedicatedModeOrTbf dedicatedmodeortbf;
   GSMRRChannelDescriptionChoice channeldescriptionchoice;
   GSMRRRequestReference requestreference;
   OSOCTET timingadvance[1];
   GSMRRMobileAllocation mobileallocation;
   GSMRRStartingTime startingtime;
   OSOCTET iarestoctets[11];
} ImmediateAssign;

EXTERN int NASEnc_ImmediateAssign (OSCTXT* pctxt, ImmediateAssign* pvalue);

EXTERN int NASDec_ImmediateAssign (OSCTXT* pctxt, ImmediateAssign* pvalue);

EXTERN int asn1PrtToStrm_ImmediateAssign (OSCTXT *pctxt, 
   const char* name, const ImmediateAssign* pvalue);


EXTERN void asn1Init_ImmediateAssign (ImmediateAssign* pvalue);

#ifdef __cplusplus
}
#endif

#endif
